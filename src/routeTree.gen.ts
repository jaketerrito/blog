/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsRouteImport } from './routes/posts/route'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as PostsCreateImport } from './routes/posts/create'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as AuthLogoutImport } from './routes/auth/logout'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as PostsEditPostIdImport } from './routes/posts/edit.$postId'

// Create/Update Routes

const PostsRouteRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const PostsCreateRoute = PostsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => PostsRouteRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)

const AuthLogoutRoute = AuthLogoutImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const PostsEditPostIdRoute = PostsEditPostIdImport.update({
  id: '/edit/$postId',
  path: '/edit/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsRouteImport
    }
    '/posts/create': {
      id: '/posts/create'
      path: '/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof PostsCreateImport
      parentRoute: typeof PostsRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsRouteImport
    }
    '/posts/edit/$postId': {
      id: '/posts/edit/$postId'
      path: '/edit/$postId'
      fullPath: '/posts/edit/$postId'
      preLoaderRoute: typeof PostsEditPostIdImport
      parentRoute: typeof PostsRouteImport
    }
  }
}

// Create and export the route tree

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsCreateRoute: typeof PostsCreateRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PostsEditPostIdRoute: typeof PostsEditPostIdRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsCreateRoute: PostsCreateRoute,
  PostsIndexRoute: PostsIndexRoute,
  PostsEditPostIdRoute: PostsEditPostIdRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/create': typeof PostsCreateRoute
  '/auth': typeof AuthIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/edit/$postId': typeof PostsEditPostIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/create': typeof PostsCreateRoute
  '/auth': typeof AuthIndexRoute
  '/posts': typeof PostsIndexRoute
  '/posts/edit/$postId': typeof PostsEditPostIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/create': typeof PostsCreateRoute
  '/auth/': typeof AuthIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/edit/$postId': typeof PostsEditPostIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | '/auth/login'
    | '/auth/logout'
    | '/posts/$postId'
    | '/posts/create'
    | '/auth'
    | '/posts/'
    | '/posts/edit/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/logout'
    | '/posts/$postId'
    | '/posts/create'
    | '/auth'
    | '/posts'
    | '/posts/edit/$postId'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/auth/login'
    | '/auth/logout'
    | '/posts/$postId'
    | '/posts/create'
    | '/auth/'
    | '/posts/'
    | '/posts/edit/$postId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/posts",
        "/auth/login",
        "/auth/logout",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/posts": {
      "filePath": "posts/route.tsx",
      "children": [
        "/posts/$postId",
        "/posts/create",
        "/posts/",
        "/posts/edit/$postId"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/logout": {
      "filePath": "auth/logout.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx",
      "parent": "/posts"
    },
    "/posts/create": {
      "filePath": "posts/create.tsx",
      "parent": "/posts"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx",
      "parent": "/posts"
    },
    "/posts/edit/$postId": {
      "filePath": "posts/edit.$postId.tsx",
      "parent": "/posts"
    }
  }
}
ROUTE_MANIFEST_END */
